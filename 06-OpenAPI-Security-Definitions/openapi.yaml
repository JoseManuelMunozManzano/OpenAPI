openapi: 3.1.0
info:
  version: "1.0"
  title: OpenAPI Course
  description: "Specification for OpenAPI Course"
  termsOfService: https://example.com/terms/
  contact:
    name: José Manuel
    url: https://www.linkedin.com/in/jos%C3%A9-manuel-mu%C3%B1oz-manzano-423665185/
    email: neil_mercury@yahoo.es
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://dev.example.com
    description: Development Server
  - url: https://qa.example.com
    description: QA Server
  - url: https://prod.example.com
    description: Production Server
paths:
  /v1/customers:
    get:
      summary: List customers
      description: Get a list of customers in the system
      tags:
        - Customers
      operationId: listCustomersV1
      parameters:
        - $ref: "#/components/parameters/pageNumberParam"
        - $ref: "#/components/parameters/pageSizeParam"
      responses:
        "200":
          description: List of Customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerPagedList"
      # Un array vacio indica que este endpoint no necesita seguridad
      security: []
    post:
      summary: New Customer
      description: Create a new Customer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"
      responses:
        "201":
          description: Customer Created
          headers:
            Location:
              description: Location of the created customer
              schema:
                type: string
                format: uri
                examples:
                  - http://example.com/v1/customers/{assignedIdValue}
        "400":
          description: Bad Request
        "409":
          description: Conflict
  /v1/customers/{customerId}:
    get:
      summary: Get Customer By ID
      # Usando markdown
      description: _Get a single **Customer** by its Id_
      tags:
        - Customers
      operationId: getCustomersByIdV1
      parameters:
        - $ref: "#/components/parameters/CustomerIdPathParm"
      responses:
        "200":
          description: Found Customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
        "404":
          description: Not Found
      security: []
    put:
      summary: Update Customer
      description: Update customer by Id
      tags:
        - Customers
      parameters:
        - $ref: "#/components/parameters/CustomerIdPathParm"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"
      responses:
        "204":
          description: Customer Updated
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
    delete:
      summary: Delete Customer By ID
      description: Delete a customer by its Id value
      tags:
        - Customers
      operationId: deleteCustomersByIdV1
      parameters:
        - $ref: "#/components/parameters/CustomerIdPathParm"
      responses:
        "200":
          description: Customer Delete
        "404":
          description: Not Found
  /v1/customers/{customerId}/orders:
    post:
      tags:
        - Order Service
      description: Place Order
      parameters:
        - name: customerId
          in: path
          description: Customer Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/beerOrder"
        required: false
      responses:
        201:
          description: Order Created
          headers:
            Location:
              description: Reference to created Order
              style: simple
              explode: false
              schema:
                type: string
                format: uri
        400:
          description: Bad Reqeust
        404:
          description: Not Found
        409:
          description: Conflict
      callbacks:
        orderStatusChange:
          ${request.body#/orderStatusCallbackUrl}:
            description: Webhook for order status change notifications
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderId:
                          type: string
                          format: uuid
                        orderStatus:
                          type: string
              responses:
                200:
                  description: Okay
  /v1/beers:
    get:
      summary: List Beers
      description: List all beers in system
      tags:
        - Beers
      operationId: listBeersV1
      parameters:
        - $ref: "#/components/parameters/pageNumberParam"
        - $ref: "#/components/parameters/pageSizeParam"
      responses:
        "200":
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/beerPagedList"
        "404":
          description: No Beers Found
    post:
      summary: New Beer
      description: Create a new Beer
      tags:
        - Beers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/beer"
      responses:
        "201":
          description: Beer Created
          headers:
            Location:
              description: Location of the created beer
              schema:
                type: string
                format: uri
                examples:
                  - http://example.com/v1/beers/{assignedIdValue}
        "400":
          description: Bad Request
        "409":
          description: Conflict
  /v1/beers/{beerId}:
    get:
      summary: Geet Beer by ID
      description: Get a single beer by its ID value
      tags:
        - Beers
      operationId: getBeerByIdV1
      parameters:
        - $ref: "#/components/parameters/BeerIdPathParm"
      responses:
        "200":
          description: Found Beer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/beer"
        "404":
          description: Not Found
    put:
      summary: Update Beer
      description: Update beer by Id
      tags:
        - Beers
      parameters:
        - $ref: "#/components/parameters/BeerIdPathParm"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/beer"
      responses:
        "204":
          description: Beer Updated
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "409":
          description: Conflict
    delete:
      summary: Delete Beer By ID
      description: Delete a beer by its Id value
      tags:
        - Beers
      operationId: deleteBeersByIdV1
      parameters:
        - $ref: "#/components/parameters/BeerIdPathParm"
      responses:
        "200":
          description: Beer Resource Deleted
        "404":
          description: Not Found
security:
  - BasicAuth: []
  - JwtAuthToken: []
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    JwtAuthToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    pageNumberParam:
      name: pageNumber
      in: query
      description: Page Number
      required: false
      schema:
        type: integer
        format: int32
        default: 1
    pageSizeParam:
      name: pageSize
      in: query
      description: Page Size
      required: false
      schema:
        type: integer
        format: int32
        default: 25
    CustomerIdPathParm:
      name: customerId
      in: path
      description: Customer id
      required: true
      schema:
        type: string
        format: uuid
    BeerIdPathParm:
      name: beerId
      in: path
      description: Beer id
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    address:
      type: object
      properties:
        line1:
          type: string
          examples:
            - 123 main
        city:
          type: string
          examples:
            - St Pete
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 Letter State Code
          # enum: [AL, AK, AZ, AR, CA]
          enum:
            - AL
            - AK
            - AZ
            - AR
            - CA
        zipCode:
          type: string
          examples:
            - 33701
    customer:
      type: object
      description: Customer Object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName:
          type: string
          minLength: 2
          maxLength: 100
          examples:
            - José Manuel
        lastName:
          type: string
          minLength: 2
          maxLength: 100
          examples:
            - Muñoz
        address:
          $ref: "#/components/schemas/address"
    customerList:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Customers
      items:
        $ref: "#/components/schemas/customer"
    customerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/pagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/customerList"
    brewery:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
    beer:
      type: object
      description: Beer Object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        beerName:
          type: string
        style:
          type: string
          enum:
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
            - LAGER
        upc:
          type: string
        price:
          type: number
          format: float
        quantityOnHand:
          type: integer
          format: int32
        brewery:
          $ref: "#/components/schemas/brewery"
    beerList:
      type: array
      description: List of Beers
      items:
        $ref: "#/components/schemas/beer"
    beerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/pagedResponse"
      properties:
        content:
          $ref: "#/components/schemas/beerList"
    beerOrder:
      required:
        - customerId
      type: object
      properties:
        id:
          type:
            - string
            - "null"
          format: uuid
          readOnly: true
        customerId:
          type: string
          format: uuid
        customerRef:
          type:
            - string
            - "null"
        beerOrderLines:
          type: array
          items:
            $ref: "#/components/schemas/beerOrderLine"
        orderStatusCallbackUrl:
          type: string
          format: uri
    beerOrderLine:
      required:
        - orderQuantity
        - upc
      type: object
      properties:
        id:
          type:
            - string
            - "null"
          format: uuid
          readOnly: true
        beerId:
          type: string
          format: uuid
          readOnly: true
        upc:
          type: string
        orderQuantity:
          maximum: 999
          minimum: 1
          type: integer
        quantityAllocated:
          type:
            - integer
            - "null"
          readOnly: true
    pagedResponse:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/pagedResponse_pageable"
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/pagedResponse_pageable_sort"
        first:
          type: boolean
    pagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    pagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/pagedResponse_pageable_sort"
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
